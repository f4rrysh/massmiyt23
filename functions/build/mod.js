import{Application as l}from"https://deno.land/x/oak@v12.6.0/mod.ts";import{resolve as g}from"https://deno.land/std@0.198.0/path/mod.ts";import{bold as i,brightBlue as s,brightGreen as a,brightRed as c,brightYellow as p}from"https://deno.land/std@0.198.0/fmt/colors.ts";function d(e=Date.now()){const n="Asia/Singapore";return new Date(e).toLocaleTimeString("en-US",{timeZone:n,hour12:!1})}function t(e,...n){const r=s(`[${d()}]`);switch(e){case"error":return console.log(r,c("[!]"),...n);case"warn":return console.log(r,c(p("[?]")),...n);case"info":return console.log(r,s("[*]"),...n);default:return t("error",`'${e}' is not a valid logging type`)}}const o=new l;o.use(async(e,n)=>{await n();const r=a(e.request.method),u=a(e.request.url.pathname);t("info",r,u)}),o.use(async(e,n)=>{await n(),await e.send({root:g(Deno.cwd(),"static"),index:"index.html"})});const f={port:8080,onListen({hostname:e,port:n}){return Deno.env.get("DENO_REGION")?t("info","Listening on:",i(`http://${e}:${n}/`)):t("info","Listening on:",i(`https://${e}/`))}};Deno.serve(f,async e=>{const n=JSON.stringify({message:"An unexpected internal server error has occurred",code:500});return await o.handle(e)||new Response(n,{statusText:"An unexpected internal server error has occurred",status:500})});
